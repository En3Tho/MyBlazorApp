<div class="flex flex-col gap-4 max-w-sm">
    <div class="p-4 lg:p-4 rounded-md bg-violet-200">
        <table class="w-full">
            <tr class="@TableRow">
                <th class="@TableCell invisible">
                    0
                </th>
                @foreach (var colIdx in ..(Data[0].Length - 1))
                {
                    <th class="@TableCell text-red-500">
                        @colIdx
                    </th>
                }
                <th class="@TableCell text-blue-500">
                    V
                </th>
            </tr>

            @foreach (var colIdx in ..Data.Length)
            {
                var row = Data[colIdx];

                <tr class="@TableRow hover:bg-violet-300">
                    <th class="@TableCell text-red-500">
                        @colIdx
                    </th>
                    @foreach (var rowIdx in ..row.Length)
                    {
                        var data = row[rowIdx];
                        <td class="@TableCell @If(data == 0, "text-gray-100") last:text-blue-300">
                            @data
                        </td>
                    }
                </tr>
            }
        </table>
    </div>

    <div class="flex flex-col gap-2 w-full">
        <div class="bg-slate-100 rounded-md">
            <input class="flex-1 p-4 bg-inherit w-full rounded-md" value="@_command" @oninput="OnInput" @onkeydown="OnKeyDown"/>
        </div>
        @if (_error is {})
        {
            <div class="text-red-500">
                @_error
            </div>
        }
        <div class="flex flex-wrap py-4 w-full">
            @foreach (var item in _history)
            {
                <span class="p-2 w-[25%] bg-gray-100 text-center shadow rounded-md hover:bg-sky-200">
                    @item
                </span>
            }
        </div>
    </div>
</div>

@code {

    const string TableRow = "flex gap-2 rounded-md justify-between";
    const string TableCell = "w-4 font-semibold text-xl text-end";

    [Parameter, EditorRequired]
    public int[][] Data { get; init; } = default!;

    private string? _command;
    private string? _error;

    private List<string> _history = [ ];

    private void Run()
    {
        if (_command is {}
            && Command.TryParse(_command, out _error) is {} command
            && command.Run(Data, out _error))
        {
            _history.Add(command.ToString());
            _command = null;
        }
    }

    private void OnInput(ChangeEventArgs args)
    {
        _command = args.Value as string;
    }

    private void OnKeyDown(KeyboardEventArgs args)
    {
        if (args.Code == "Enter")
        {
            Run();
        }
    }

}