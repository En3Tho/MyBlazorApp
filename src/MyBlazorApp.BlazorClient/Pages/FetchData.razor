@attribute [RouteAttribute("/" + nameof(FetchData))]
@inject WeatherForecastApiV1HttpClient WeatherForecastClientV1
@inject ILogger<FetchData> Logger

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (_forecasts == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <input @bind="@_forecastRequestCount" type="number" width="300"/>
    <button class="btn btn-primary" @onclick="RefreshData">Get brand new set of weather forecasts!</button>
    <table class="table">
        <thead>
        <tr>
            <th>Date</th>
            <th>Temp. (C)</th>
            <th>Temp. (F)</th>
            <th>Summary</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var forecast in _forecasts)
        {
            <tr>
                <td>@forecast.Date.ToShortDateString()</td>
                <td>@forecast.TemperatureC</td>
                <td>@forecast.TemperatureF</td>
                <td>@forecast.Summary</td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private WeatherForecastsService.WeatherForecast[]? _forecasts;

    private int _forecastRequestCount = 5;

    protected override async Task OnInitializedAsync()
    {
        Logger.Trace()?.Write(nameof(OnInitializedAsync));
        _forecasts = await WeatherForecastClientV1.GetSuperForecasts(_forecastRequestCount, 500).ConfigureAwait(false);
    }

    private async Task RefreshData()
    {
        StateHasChanged();
        _forecasts = await WeatherForecastClientV1.GetSuperForecasts(_forecastRequestCount, 500).ConfigureAwait(false);
    }

}