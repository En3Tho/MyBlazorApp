@attribute [RouteAttribute("/" + nameof(FetchImportantData))]
@inject DiscriminatedUnionApiV1HttpClient DiscriminatedUnionApiV1HttpClient
@inject ILogger<FetchImportantData> Logger
@inject ThemeSwitch ThemeSwitch
@inherits SubscribingComponentBase
@using ImportantData = Domain.DiscriminatedUnionService.ImportantData

<div>
    <h1>Weather forecast</h1>

    <p>This component demonstrates fetching data from the server.</p>

    @if (_importantData == null)
    {
        <p>
            <em>Loading...</em>
        </p>
    }
    else
    {
        <div>
            <button class="btn btn-primary @ThemeSwitch.ThemeString" @onclick="GetImportantData">Get new important data!</button>
        </div>

        <div>
            <table class="table">
                <thead>
                <tr>
                    @switch (_importantData)
                    {
                        case ImportantData.NameAndAge nameAndAge:
                            <td>@nameof(nameAndAge.Name)</td>
                            <td>@nameof(nameAndAge.Age)</td>
                            break;
                        case ImportantData.Cart cart:
                            <td>@nameof(cart.Items)</td>
                            break;
                        case ImportantData.PriceRangeAndCount priceRangeAndCount:
                            <td>@nameof(priceRangeAndCount.RangeFrom)</td>
                            <td>@nameof(priceRangeAndCount.RangeTo)</td>
                            <td>@nameof(priceRangeAndCount.Count)</td>
                            break;
                        default:
                            throw new InvalidOperationException($"Unsupported case of {_importantData.GetType().Name}");
                    }
                </tr>
                </thead>
                <tbody>
                @switch (_importantData)
                {
                    case ImportantData.NameAndAge nameAndAge:
                        <tr>
                            <td>@nameAndAge.Name</td>
                            <td>@nameAndAge.Age</td>
                        </tr>
                        break;
                    case ImportantData.Cart cart:
                        foreach (var item in cart.Items)
                        {
                            <tr>
                                <td>@item</td>
                            </tr>
                        }
                        break;
                    case ImportantData.PriceRangeAndCount priceRangeAndCount:
                        <tr>
                            <td>@priceRangeAndCount.RangeFrom</td>
                            <td>@priceRangeAndCount.RangeTo</td>
                            <td>@priceRangeAndCount.Count</td>
                        </tr>
                        break;
                    default:
                        throw new InvalidOperationException($"Unsupported case of {_importantData.GetType().Name}");
                }

                </tbody>
            </table>
        </div>
    }
</div>

@code {
    private ImportantData? _importantData;

    protected override ComponentData[] Subscriptions => new ComponentData[] { ThemeSwitch };

    protected override Task OnInitializedAsync()
    {
        Logger.Trace()?.Write(nameof(OnInitializedAsync));
        return GetImportantData();
    }

    private async Task GetImportantData()
    {
        Logger.Trace()?.Write(nameof(GetImportantData));

        _importantData = await DiscriminatedUnionApiV1HttpClient.GetRandomImportantData().ConfigureAwait(false);
        Logger.Trace()?.Write($"Successfully got important data!");

        StateHasChanged();
    }

}